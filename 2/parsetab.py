
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocGTLTGELENEQDIVIDE ELSE EQUALS GE GT IDENTIFIER IF INT_LITERAL LE LET LPAREN LT MINUS NEQ PLUS PRINT RPAREN STRING_LITERAL THEN TIMESprogram : statementsstatements : statements statementstatements : statementstatement : LET IDENTIFIER EQUALS expressionstatement : PRINT STRING_LITERALstatement : IF expression THEN statements ELSE statementsexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression NEQ expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : IDENTIFIER'
    
_lr_action_items = {'LET':([0,2,3,7,9,12,13,15,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[4,4,-3,-2,-5,-17,-18,4,-4,4,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,4,4,]),'PRINT':([0,2,3,7,9,12,13,15,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[5,5,-3,-2,-5,-17,-18,5,-4,5,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,5,5,]),'IF':([0,2,3,7,9,12,13,15,26,27,28,29,30,31,32,33,34,35,36,37,38,39,],[6,6,-3,-2,-5,-17,-18,6,-4,6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,6,6,]),'$end':([1,2,3,7,9,12,13,26,28,29,30,31,32,33,34,35,36,37,39,],[0,-1,-3,-2,-5,-17,-18,-4,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-6,]),'ELSE':([3,7,9,12,13,26,27,28,29,30,31,32,33,34,35,36,37,39,],[-3,-2,-5,-17,-18,-4,38,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-6,]),'IDENTIFIER':([4,6,11,14,16,17,18,19,20,21,22,23,24,],[8,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING_LITERAL':([5,],[9,]),'LPAREN':([6,11,14,16,17,18,19,20,21,22,23,24,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'INT_LITERAL':([6,11,14,16,17,18,19,20,21,22,23,24,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'EQUALS':([8,],[14,]),'THEN':([10,12,13,28,29,30,31,32,33,34,35,36,37,],[15,-17,-18,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,]),'PLUS':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[16,-17,-18,16,16,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,]),'MINUS':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[17,-17,-18,17,17,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,]),'TIMES':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[18,-17,-18,18,18,18,18,-9,-10,-11,-12,-13,-14,-15,-16,]),'DIVIDE':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[19,-17,-18,19,19,19,19,-9,-10,-11,-12,-13,-14,-15,-16,]),'GT':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[20,-17,-18,20,20,20,20,20,20,None,None,None,None,None,-16,]),'LT':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[21,-17,-18,21,21,21,21,21,21,None,None,None,None,None,-16,]),'GE':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[22,-17,-18,22,22,22,22,22,22,None,None,None,None,None,-16,]),'LE':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[23,-17,-18,23,23,23,23,23,23,None,None,None,None,None,-16,]),'NEQ':([10,12,13,25,26,28,29,30,31,32,33,34,35,36,37,],[24,-17,-18,24,24,24,24,24,24,None,None,None,None,None,-16,]),'RPAREN':([12,13,25,28,29,30,31,32,33,34,35,36,37,],[-17,-18,37,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,15,38,],[2,27,39,]),'statement':([0,2,15,27,38,39,],[3,7,3,7,3,7,]),'expression':([6,11,14,16,17,18,19,20,21,22,23,24,],[10,25,26,28,29,30,31,32,33,34,35,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yacc2.py',15),
  ('statements -> statements statement','statements',2,'p_statements_multiple','yacc2.py',19),
  ('statements -> statement','statements',1,'p_statements_single','yacc2.py',23),
  ('statement -> LET IDENTIFIER EQUALS expression','statement',4,'p_statement_assign','yacc2.py',27),
  ('statement -> PRINT STRING_LITERAL','statement',2,'p_statement_print','yacc2.py',31),
  ('statement -> IF expression THEN statements ELSE statements','statement',6,'p_statement_if','yacc2.py',35),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','yacc2.py',42),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','yacc2.py',43),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','yacc2.py',44),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','yacc2.py',45),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','yacc2.py',46),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','yacc2.py',47),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','yacc2.py',48),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','yacc2.py',49),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','yacc2.py',50),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','yacc2.py',54),
  ('expression -> INT_LITERAL','expression',1,'p_expression_literal','yacc2.py',58),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','yacc2.py',62),
]
