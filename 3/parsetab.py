
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEnonassocGTLTGELENEQDIVIDE ELSE EQUALS FUNCTION GE GT IDENTIFIER IF INT_LITERAL LE LET LPAREN LT MINUS NEQ PLUS PRINT RPAREN STRING_LITERAL THEN TIMESprogram : statementsstatements : statements statementstatements : statementstatement : LET IDENTIFIER EQUALS expressionstatement : PRINT STRING_LITERALstatement : FUNCTION IDENTIFIER statementsstatement : IF expression THEN statements ELSE statementsexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression NEQ expressionexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : IDENTIFIER'
    
_lr_action_items = {'LET':([0,2,3,8,10,11,14,15,17,18,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[4,4,-3,-2,-5,4,-18,-19,4,4,-4,4,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,4,4,]),'PRINT':([0,2,3,8,10,11,14,15,17,18,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[5,5,-3,-2,-5,5,-18,-19,5,5,-4,5,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,5,5,]),'FUNCTION':([0,2,3,8,10,11,14,15,17,18,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[6,6,-3,-2,-5,6,-18,-19,6,6,-4,6,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,6,6,]),'IF':([0,2,3,8,10,11,14,15,17,18,29,30,31,32,33,34,35,36,37,38,39,40,41,42,],[7,7,-3,-2,-5,7,-18,-19,7,7,-4,7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,7,7,]),'$end':([1,2,3,8,10,14,15,17,29,31,32,33,34,35,36,37,38,39,40,42,],[0,-1,-3,-2,-5,-18,-19,-6,-4,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-7,]),'ELSE':([3,8,10,14,15,17,29,30,31,32,33,34,35,36,37,38,39,40,42,],[-3,-2,-5,-18,-19,-6,-4,41,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-7,]),'IDENTIFIER':([4,6,7,13,16,19,20,21,22,23,24,25,26,27,],[9,11,15,15,15,15,15,15,15,15,15,15,15,15,]),'STRING_LITERAL':([5,],[10,]),'LPAREN':([7,13,16,19,20,21,22,23,24,25,26,27,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'INT_LITERAL':([7,13,16,19,20,21,22,23,24,25,26,27,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'EQUALS':([9,],[16,]),'THEN':([12,14,15,31,32,33,34,35,36,37,38,39,40,],[18,-18,-19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'PLUS':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[19,-18,-19,19,19,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'MINUS':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[20,-18,-19,20,20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'TIMES':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[21,-18,-19,21,21,21,21,-10,-11,-12,-13,-14,-15,-16,-17,]),'DIVIDE':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[22,-18,-19,22,22,22,22,-10,-11,-12,-13,-14,-15,-16,-17,]),'GT':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[23,-18,-19,23,23,23,23,23,23,None,None,None,None,None,-17,]),'LT':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[24,-18,-19,24,24,24,24,24,24,None,None,None,None,None,-17,]),'GE':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[25,-18,-19,25,25,25,25,25,25,None,None,None,None,None,-17,]),'LE':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[26,-18,-19,26,26,26,26,26,26,None,None,None,None,None,-17,]),'NEQ':([12,14,15,28,29,31,32,33,34,35,36,37,38,39,40,],[27,-18,-19,27,27,27,27,27,27,None,None,None,None,None,-17,]),'RPAREN':([14,15,28,31,32,33,34,35,36,37,38,39,40,],[-18,-19,40,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,11,18,41,],[2,17,30,42,]),'statement':([0,2,11,17,18,30,41,42,],[3,8,3,8,3,8,3,8,]),'expression':([7,13,16,19,20,21,22,23,24,25,26,27,],[12,28,29,31,32,33,34,35,36,37,38,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','yacc2.py',15),
  ('statements -> statements statement','statements',2,'p_statements_multiple','yacc2.py',19),
  ('statements -> statement','statements',1,'p_statements_single','yacc2.py',23),
  ('statement -> LET IDENTIFIER EQUALS expression','statement',4,'p_statement_assign','yacc2.py',27),
  ('statement -> PRINT STRING_LITERAL','statement',2,'p_statement_print','yacc2.py',31),
  ('statement -> FUNCTION IDENTIFIER statements','statement',3,'p_statement_function','yacc2.py',35),
  ('statement -> IF expression THEN statements ELSE statements','statement',6,'p_statement_if','yacc2.py',39),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','yacc2.py',46),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','yacc2.py',47),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','yacc2.py',48),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','yacc2.py',49),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','yacc2.py',50),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','yacc2.py',51),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','yacc2.py',52),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','yacc2.py',53),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','yacc2.py',54),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','yacc2.py',58),
  ('expression -> INT_LITERAL','expression',1,'p_expression_literal','yacc2.py',62),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','yacc2.py',66),
]
